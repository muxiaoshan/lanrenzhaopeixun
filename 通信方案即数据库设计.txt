通信方案有2种：消息全部靠推送，另一种推送+主动去取

   第一种，消息全靠推送
   协议设计：
      传输的数据为json串
      通知类型消息（比如某用户上线下线通知，系统的一些提示消息）结构：
        {"fromUser":{"id":"111","name":"zhangsan"},"toUser":{"id":"222","name":"wangwu"},"notify":{
           "type":1,"notifyMsg":"系统提示消息"}};
        fromUser表示发送消息者，toUser表示接收消息者，notify通知，type通知的类型
         type=1，表示是系统发过来的消息，
         type=2，用户上线消息
         type=3，用户下线消息
         type=4，用户信息变化消息，比如用户的电话号码发生改变，所以就得去获取用户新的电话号码
        notifyMsg通知内容

      聊天消息结构
         {"fromUser":{"id":"111","name":"zhangsan"},"toUser":{"id":"222","name":"wangwu"},
           "messages":｛[
           "textMsg","voiceMsg":{"url":"服务器地址","extend":"供以后扩充用的字段"},"picMsg":{"url":
           "url":"服务器地址","extend":"供以后扩充用的字段", "updateTime":"消息时间 ,"msgId":1}]
           [
           "textMsg","voiceMsg":{"url":"服务器地址","extend":"供以后扩充用的字段"},"picMsg":{"url":
           "url":"服务器地址","extend":"供以后扩充用的字段", "updateTime":"消息时间,"msgId":2}]};
     messages是一个信息数组，可以存放多条消息， textMsg为文本消息，voiceMsg为声音消息，url为声音文件
        在服务器上的地址，picMsg为图片消息，updateTime消息的时间,msgId消息在服务器上的id

       在接收到通知类型消息或聊天消息都得给服务器反馈。


    第二种，推送+主动去取（通过socket把一条简短的通知推过来，然后客户端基于通知通过http取消息）

   协议设计：
      传输的数据为json串
      通知类型消息（比如某用户上线下线通知，系统的一些提示消息）结构：
        {"fromUser":{"id":"111","name":"zhangsan"},"toUser":{"id":"222","name":"wangwu"},"notify":{
           "type":1,"notifyMsg":"系统提示消息"}};
        fromUser表示发送消息者，toUser表示接收消息者，notify通知，type通知的类型
         type=1，表示是系统发过来的消息，
         type=2，用户上线消息
         type=3，用户下线消息
         type=4，用户信息变化消息，比如用户的电话号码发生改变，所以就得去获取用户新的电话号码
        notifyMsg通知内容
	 type=5，通知用户有新的聊天消息了，

         基于type=5去服务器取消息，取回来的消息结构与第一种的聊天消息结构类似

         

         第一种缺点是，由于手机网络不稳定，若传输的数据过大很容易丢失。
         第二种避免了第一种的缺点，把很短的通知推过来，客户端主动去取数据，主动取，更灵活，减少服务器压力
           


         表结构：在进行设计中....以上的2种方式讨论下用那种
